#!/usr/bin/env python3

import argparse
import csv
import sys
import os
import glob

# Functions
def msg(*args, **kwargs):
	print(*args, file=sys.stderr, **kwargs)

def err(*args, **kwargs):
	msg(*args, **kwargs)
	sys.exit(1);

def check_file(f):
	msg('Checking file: {}'.format(f))
	if os.path.isfile(f) == False:
		err('ERROR: Cannot find "{}". Check output files exist in this directory.'.format(f))

# Usage
import argparse
parser = argparse.ArgumentParser(
		prog='mlst-cc', 
		formatter_class=argparse.RawDescriptionHelpFormatter,
		description='Identifies clonal complexes (CC) based on shared MLST alleles',
		usage='\n  %(prog)s [profile] > clonal-complexes.txt')
parser.add_argument('--db', metavar='db', default='/home/tseemann/git/mlst/db/pubmlst/', help='Path to db (default = /home/tseemann/git/mlst/db/pubmlst)')
parser.add_argument('--scheme', metavar='scheme', nargs=1, help='MLST scheme')
parser.add_argument('--list', action='store_true', help='List MLST schemes available')
parser.add_argument('--shared', metavar='shared', default=6, help='Number of shared MLST alleles to define clonal complex (default = 6)')
parser.add_argument('--version', action='version', version='%(prog)s version 0.1\nUpdated 16-Jul-2015\nScript by JK')
args = parser.parse_args()

# Create a scheme list to print
if args.list:
	scheme_list = []
	for file in glob.iglob(os.path.join(args.db, '**/*.txt'), recursive=True):
		profile = os.path.basename(file)
		profile = os.path.splitext(profile)[0]
		scheme_list.append(profile)
	print(*scheme_list)
	sys.exit(0)

# Check if scheme is specified, else return error
if not args.scheme:
	err('ERROR: Please specify a MLST scheme with --scheme.')

# Compare ST alleles
x = int(args.shared)
y = x - 1
scheme_txt = os.path.join('**', args.scheme[0]+'.txt')
scheme_file = glob.glob(os.path.join(args.db, scheme_txt), recursive=True)
profiles = list(csv.reader(open(scheme_file[0], 'r'), delimiter='\t'))
del profiles[0]
for row in profiles:
	ST = 'ST' + str(row[0])
	a = row[1]
	b = row[2]
	c = row[3]
	d = row[4]
	e = row[5]
	f = row[6]
	g = row[7]
	compST = []
	compST.append(ST)
	for row in profiles:
		sum = 0
		if row[1] == a:
			sum = sum + 1
		if row[2] == b:
			sum = sum + 1
		if row[3] == c:
			sum = sum + 1
		if row[4] == d:
			sum = sum + 1
		if row[5] == e:
			sum = sum + 1
		if row[6] == f:
			sum = sum + 1
		if row[7] == g:
			sum = sum + 1
		if sum > y:
			compST.append(row[0])
	print('\t'.join(map(str,compST)))
